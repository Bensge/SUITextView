<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="1.0" toolsVersion="1938" systemVersion="11C71" targetRuntime="iOS.CocoaTouch.iPad" propertyAccessControl="none" initialViewController="2">
    <dependencies>
        <development defaultVersion="4200" identifier="xcode"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="933"/>
    </dependencies>
    <scenes>
        <scene sceneID="4">
            <objects>
                <placeholder placeholderIdentifier="IBFirstResponder" id="3" sceneMemberID="firstResponder"/>
                <viewController id="2" customClass="ViewController" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="5">
                        <rect key="frame" x="0.0" y="20" width="768" height="1004"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <textView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" showsHorizontalScrollIndicator="NO" id="Aq5-gJ-y5f" customClass="CUITextView">
                                <rect key="frame" x="0.0" y="0.0" width="768" height="571"/>
                                <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                                <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="calibratedRGB"/>
                                <mutableString key="text">- (void) resetAttributedText {
   
    NSMutableAttributedString* mutAttrStr = [NSMutableAttributedString attributedStringWithString:self.text];

[mutAttrStr setTextColor:[UIColor blackColor]];
    [mutAttrStr setFont:[UIFont fontWithName:@"Helvetica" size:14]];
    
    NSUInteger count = 0, length = [self.text length];
    NSRange range = NSMakeRange(0, length); 
    while(range.location != NSNotFound)
    {
        range = [self.text rangeOfString:@"code" options:0 range:range];
        if(range.location != NSNotFound)
        {
            [mutAttrStr setTextColor:[UIColor blueColor] range:NSMakeRange(range.location, 4) ];
            range = NSMakeRange(range.location + range.length, length - (range.location + range.length));
            count++; 
            
        }
    }
    
    NSArray *array = [NSArray arrayWithObjects:@"void", @"self", @"while", @"if", @"else", @"for", nil];
  
    UIColor *opColor = [UIColor colorWithRed:193.f/255.f green:63.f/255.f blue:178.f/255.f alpha:1];
    
    for (NSString *op in array) {
        count = 0, length = [self.text length];
        range = NSMakeRange(0, length); 
        while(range.location != NSNotFound)
        {
            range = [self.text rangeOfString:op options:0 range:range];
            if(range.location != NSNotFound) {
                [mutAttrStr setTextColor:opColor range:NSMakeRange(range.location, [op length])];
                range = NSMakeRange(range.location + range.length, length - (range.location + range.length));
                count++; 
            }
        }
    }
    self.attributedText = mutAttrStr;
}

- (NSAttributedString *) attributedText {
	if (!_attributedText) {
		[self resetAttributedText];
	}
	return [[_attributedText copy] autorelease]; // immutable autoreleased copy
}
- (void) setAttributedText:(NSAttributedString*)attributedText {
	[_attributedText release];
	_attributedText = [attributedText mutableCopy];
	[self setNeedsDisplay];
}


- (void) resetTextFrame {
	if (textFrame) {
		CFRelease(textFrame);
		textFrame = NULL;
	}
}

- (void) setNeedsDisplay {
	[self resetTextFrame];
	[super setNeedsDisplay];
}
</mutableString>
                                <fontDescription key="fontDescription" type="system" pointSize="14"/>
                                <textInputTraits key="textInputTraits" autocapitalizationType="sentences"/>
                                <connections>
                                    <outlet property="delegate" destination="2" id="nJy-Ca-R3q"/>
                                </connections>
                            </textView>
                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" id="HDE-OR-lkQ">
                                <rect key="frame" x="687" y="0.0" width="72" height="37"/>
                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                                <fontDescription key="fontDescription" type="boldSystem" pointSize="15"/>
                                <state key="normal" title="show">
                                    <color key="titleColor" red="0.19607843459999999" green="0.30980393290000002" blue="0.52156865600000002" alpha="1" colorSpace="calibratedRGB"/>
                                    <color key="titleShadowColor" white="0.5" alpha="1" colorSpace="calibratedWhite"/>
                                </state>
                                <state key="highlighted">
                                    <color key="titleColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                                </state>
                                <connections>
                                    <action selector="setColor" destination="2" eventType="touchUpInside" id="i3u-bw-7TV"/>
                                </connections>
                            </button>
                        </subviews>
                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
                    </view>
                    <connections>
                        <outlet property="cTextView" destination="Aq5-gJ-y5f" id="ce0-pq-O6y"/>
                    </connections>
                </viewController>
            </objects>
        </scene>
    </scenes>
    <classes>
        <class className="CUITextView" superclassName="UITextView">
            <source key="sourceIdentifier" type="project" relativePath="./Classes/CUITextView.h"/>
        </class>
        <class className="ViewController" superclassName="UIViewController">
            <source key="sourceIdentifier" type="project" relativePath="./Classes/ViewController.h"/>
            <relationships>
                <relationship kind="action" name="setColor"/>
                <relationship kind="outlet" name="cTextView" candidateClass="CUITextView"/>
            </relationships>
        </class>
    </classes>
    <simulatedMetricsContainer key="defaultSimulatedMetrics">
        <simulatedStatusBarMetrics key="statusBar" statusBarStyle="blackTranslucent"/>
        <simulatedOrientationMetrics key="orientation"/>
        <simulatedScreenMetrics key="destination"/>
    </simulatedMetricsContainer>
</document>